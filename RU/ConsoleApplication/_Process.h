#pragma once

#include <windows.h>
#include <iostream>
#include <string>
#include <thread>
/*
Класс процесса
*/
class _Process
{
private:
	// имя процесса
	std::string name;
	// ID процесса в списке процессов программы
	int id;
	// указатель на поток с запущенным процессом
	std::thread * _thread;
public:
	// структура, необходимая что бы основное окно для процеса
	STARTUPINFO startup;
	// структура, которая содержит информацию о процесе
	PROCESS_INFORMATION information;

	//Конструктор класса процесса. В качестве параметров принимает кимя процесса и его ID в списке процессов программы
	_Process(std::string, int);
	/*
	Диструктор класса процесса который вызывается при уничтожении обьекта класса.
	При вызове проверяет текущий статус процесса, и останавливает процес, если он запущен.
	А такще очищает занятую память обьектами класса
	*/
	~_Process();

	/*
	Выводит информацию о процессе в окно консоли.
		1.	Название процесса
		2.	ID процеса в списке процессов
		3.	Статус процесоов
				NULL	-	процесс не запущен
				RUNING	-	процесс выполняется
				*/
	void Print(void);


	//Функция, которая возвращает имя процесса
	_TCHAR * Get_Name(void);

	//Функция для запуска процесса, если он уже не запущен.
	bool Start(void);

	//Функция для прерывания процесса, если он запущен в данный момент.
	void Stop(void);
	/*
	Функция для перезапуска процесса, если он уже запущен.
	Процес останавливается с кодом ошибки -999, которая не будет обрабатыватся, как критическая ошибка процесса.
	*/
	void Restart(void);

	//Виртуальная функция, которая выполняется, при запуске процесса.
	virtual void OnProcStart(void);

	//Виртуальная функция, которая выполняется, при возникновении критической ошибки.
	virtual void OnProcCrash(DWORD);
	
	//Виртуальная функция, которая выполняется, при принудительной остановке процесса.
	virtual void OnProcManuallyStopped(void);
};

/*
Функция потока, в котором выполняется процесс.
Функция следит за выполнением процесса и возвращает код критической ошибки, ели выполнение процесса было прервано.
*/
void run(_Process *);

